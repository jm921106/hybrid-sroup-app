/**
 * Created by superMoon on 2016-07-21.
 */
var express = require('express');
var app = express();

app.use('/', function(req, res) {
    res.send('Hello World'); // Content-type 헤더는 application/octet-stream으로 설정
    // 문자열을 보낼땐 text/html
    // 배열을 보낼 땐 application/json 으로 설정
});

app.listen(3000);
console.log('Server running on at http://localhost:3000/');

module.exports = app;

[애플리케이션 요청 응답 객체]

app.set(name, value) - 익스프레스가 구성에서 사용할 환경 변수를 설정한다.

app.get(name) - 익스프레스가 구성에서 사용할 환경 변수를 얻는다.

app.engine(ext, callback) - 특정 파일 타입을 출력하기 위해 필요한 템플릿 엔진을 정의
    ex app.engine('html', require('ejs').renderFile)

app.locals - 애플리케이션 수준의 변수를 출력하기 위해 모든 템플릿에 전송함

app.use([path], callback) - 서버로 전송된 HTTP 요청을 처리하기 위해 익스프레스 미들웨어를 생성
    옵션으로 특정 경로에 응답하는 미들웨어를 마운트 할수 있음

app.VERB(path, [callback...], callback) - 선언된 HTTP 동사 HTTP VERB가 특정 경로와 연결된 HTTP 요청에 응답하기 위한
    미들웨어 함수를 하나 이상 정의, ex GET 동사를 사용하는 요청에 응답하기를 원할 때,
    app.get()메소드 사용해 미들웨어를 할당
    POST요청에 대해서는 app.post()를 사용하며, 나머지도 유사

app.route(path).VERB([callback...], callback) - 여러 HTTP 동사가 특정 경로와 연결된 HTTP 요청에 응답하기 위한
    미들웨어 함수를 하나 이상 정의한다.
    ex GET / POST 동사를 사용하는 요청에 응답하기를 원할 때, app.route(path).get(callback).post(callback)을 사용해 적절한 미들웨어 함수를 할당

app.param([name], callback) - 특정 라우팅 매개변수를 포함한 경로로 들어오는 요청에 특정 기능을 붙인다.
    ex app.param('userId', callback)을 사용해서 userId 매개변수를 포함한 요청에 특정 논리를 붙일 수 있음

[요청 객체]
req.query - 해석된 qeuey-string 매게변수를 포함

req.params - 해석된 라우팅 매개변수를 포함

req.body - 해석된 요청 매용을 인출하기 위해 사용되는 객체 , 이 속성은 bodyParser()에 포함

req.param(name) - 요청 매개변수 값을 인출 , 매개변수는 query-string 매개변수 , 라우팅 매개변수 , JSON 요청 내용에서 얻은 속성이 될수 있음

req.path, req.host, req.ip - 현재 요청 경로 / 호스트 이름 / 원격 IP 를 인출

req.cookies - user-agent가 전송한 쿠기를 인출하기 위해 cookieParser() 미들웨어와 함께 사용

[응답 객체]
res.status(code) - 응답 HTTP 상태 코드를 설정

res.set(field, [value]) - 응답 HTTP 헤더를 설정

res.cookie(name, value, [option]) - 응답 쿠키를 설정 , option 인수는 maxAge속성과 같은 일반적인 쿠키 구성을 정의하는 객체를 전달하기 위해 사용

res.redirect([status], url) - 주어진 URL로 요청을 리디렉트 한다. 응답에 HTTP 상태 코드를 추가할 수 있다는 사실에 주목,
    상태 코드를 전달하기 않으면 기본적으로 '302Found'를 설정

res.send([body|status], [body]) - 스트리밍이 아닌 응답에 사용, 이 메소드는 Content-Type 과 Content-Length 헤더를 설정,
    적절한 캐시 헤더에 반응하는 등 상당히 많은 배경 작업을 수행

res.json([status|body], [body]) - 객체나 배열을 전송할 때, res.send()메소드와 동일 , 대부분 개발 편의성을 위해 사용되나
    때로는 null이나 undefined와 같은 비객체를 JSON응답으로 강제할 경우 사용할 필요가 있음

res.render(view, [locals], callback) - 뷰를 생성하고 HTML 응답을 전송

[외부 미들웨어]

morgan - HTTP 요청 로거 미들웨어

body-parser - 요청 내용을 해석하는 미들웨어로 다양한 요청 타입을 지원

method-override - 클라이언트가 지원하지 않는 곳에서 PUT이나 DELETE 같은 HTTP 동사를 적절히 제공하는 미들웨어

compression - gzip/deflate 를 사용해 응답 데이터를 압축하는 미들웨어

express.static - 정적 파일을 서비스하는 미들웨어

cookie-parser - req.cookie 객체를 채우기 위한 쿠기 해석용 미들웨어

session - 영속적인 세션을 지원하기 위해 사용하는 미들웨어

[MVC 패턴 구현]

[index.server.controller.js]
exports.render = function(req, res) {
    res.send('Hello World');
};

[요청 라우팅 처리]
app.route(path).VERB(callback) OR
app.VERB(path, callback) 메소드를 사용해 요청 라우팅을 한다.

app.get('/', function(req, res) {
    res.send('This is a GET request');
});

app.post('/', function(req, res) {
    res.send('This is a POST request');
});

app.route('/').get(function(req,res) {
    res.send('This is a GET request');
}).post(function(req, res) {
    res.send('This is a POST request');
});

//응답 논리를 수행하기 앞서 요청의 유효성을 검증 하기 위해 사용
var express = require('express');

var hasName = function(req, res, next) {
    if(req.param('name')) {
        next();
    } else {
        res.send('what is your name ? ');
    }
};

var sayHello = function (req, res, next) {
    res.send('Hello ' + req.param('name'));
};

var app = express();
app.get('/', hasName, sayHello);

app.listen(3000);
console.log('server on at http://localhost:3000');

[라우팅 파일 추가]

[index.server.routes.js]
module.exports = function(app) {
    var index = require('../controllers/index.server.controller');
    app.get('/', index.render);
}

[../conifig/express.js]
var express = require('express');

module.exports = function() {
    var app = express();
    require('../app/routes/index.server.routes.js') (app);
    return app;
};

