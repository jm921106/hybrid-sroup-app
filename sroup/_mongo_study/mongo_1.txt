1. 클라우드 컴퓨팅 환경에 적합
    open sourece
    하드웨어 확장에 유연
    무엇보다 RDBMS에 비해 저렴 , 분산처리 병렬처리 가능
2. 유연한 데이터 모델
    비정형 데이터 구조 설계 , 설계비용 감소
    관계형DB의 Relationship and Join구조를 Linking , Embedded 로 구현 성능이 빠름
3. BIg data처리에 효과적
    Memory Mapping기능 , Read/Write가 빠름
    전형적 OS 와 Hardware에 구축
    기존 RDB와 동일하게 데이터 처리 가능

mongo의 특징
    json type의 데이터 저장구조
    sharding(분산)/Replica(복제)기능을 제공
    MapReduce(분산/병렬처리)기능을 제공
    CRUD(Create, Read, Update, Delete)위주의 다중 트랜잭션처리, nosql은 다중 트랜잭션을 위해 만들어진 것은 아님
    Memory Mapping기술을 기반 BigData 처리 (캐시기법을 이용)

mongo Nameing
    _ID_Field (Primary Key)
    BSON Field (Column)
    Collection (Table)
    BSON Document (Row)
    Embedded & Linking (RelationShip)

json type 의 데이터 저장
    p = {
        eno : 1101,
        fname : "Adam",
        lname : "Kroll",
        job : "Manager",
        salary : 100000
    }

db.emp.save(p)
db.createCollection("emp", {capped:false, size:8192});

show collections

db.emp.validate(); , Collection의 현재상태 및 정보 분석

db.emp.renameCollection("employees");
db.employees.drop()

db.emp.insert({eno :1101, fname:"JIMMY"});
db.emp.insert({eno :1102, fname:"ADAM", Iname:"KROLL"});
db.emp.insert({eno :1103, fname:"SMITH", job:"CLERK"});

db.emp.update({eno:1101}, {$set : {fname:"JOO"}});
db.emp.update({eno:1102}, {$set : {job:"CHIEF"}});
db.emp.update({eno:1103}, {$set : {lname:"STANFORD"}});

object_ID , mongodb에서 제공하는 기본 id

db.emp.find()
db.emp.find({}, {empno:1, ename:1}); , select empno, ename from emp
db.emp.find({empno:3});
db.emp.find({empno:3}, {empno:1, ename:1});
db.emp.find({empno:3}).sort({ename:1}); , select * from emp where empno=3 order by ename

데이터 타입
    json , string , 32/64 bit integer, double, array, boolean, binary data, null, symbol, java scripte code, object
    date , 날자 정보
    TIMESTAMP , 년 월 일 시간 분 초 Mile Second 정보까지 저장할때
    InternationalizedSTRINGS ,  UTF-8 다국적 문자 값을 저장할 수 있느 BSON 타입
    OBJECT ID , OBJECT_ID 값을 저장

비교 연산자
    $cmp , 두개의 값을 비교하여 첫 번째 값이 두번째 값보다 작으면 음수 크면 양수 같으면 0 리턴
    $eq, 두개의 값을 비교 동일하면 t , 아님 f
    $gt,
    $gte,
    $lt,
    $lte,
    $ne, 두 개의 값을 비교하여 같지 않으면 t, 같으면 f
boolean 연산자
    $and,
    $not, 검색 조건이 아닌 조건을 검색
    $or, 여러개의 조건중 하나라도 만족하는 것을 검색
산술 연산자
    $add , 두개의 값을 합산
    $devide, /
    $mod, 첫 번째 값을 두번째 값으로 나눈 후 나머지 값
    $multiply, *
    $subtract, -
문자 연산자
    $strcasecmp , Long 타입의 긴 문자열 2개를 비교하여 첫번째 문자열이 두번 쨰 문자열보다 크면 양수 값을 리턴 작으면 0리턴
    $substr, 해당 문자열에서 첫번째 정의된 숫자 만큼 skip 하고 두번째 정의된 숫자 만큼의 길이 데이터를 사용자에게 리턴
    $toUpper, 대문자로
    $toLower, 소문자로
날자 연산자
    $dayOfMonth , 해당 날자 값에서 해당 월의 일자값 1~31
    $dayOfWeek , 해당 날자 값에서 해당 주의 일수 값 1 ~7
    $dayOfYear, 해당 날자 값에서 해당 년의 일수 값 1~365
    $hour
    $minute
    $month
    $second
    $week
    $year
다중 표현 연산자
    $ifNULL , 두개의 표현식 값을 비교했을 때 ,
    $cond , 세개의 표현식 값을 비교했을 때
변경 연산자,
    $set , 특정값으로 변경
    $unset , 현재 설정된 값을 삭제 할때
    $inc , 현재 설정된 값에 새로운 값을 증가시킬때
    $push, 새로운 값을 추가할 때
    $pushAll, 여러개의 새로운 값을 추가시
    $pull , 현재 설정될 값들을 제거할때 사용
    $pullAll, 여러개의 설정 값을을 제거시
    $bit, bit 값을 설정할때
연결 연산자
    $project , 해당 collection에서 원하는 filed 만을 빠르게 projection할 수 있음
    $match ,  해당 collection에서 원하는 조건을 만족하는 document만 빠르게 selection
    $limit, 해당 collection에서 원하는 수 만큼의 document만을 selection할 수 있다
    $skip, 해당 collection에서 원하는 수 만큼의 document를 skip한 후 selection
    $group, 해당 collection에서 특정filed 값을 group화 하여 값을 집계
    $first/$last, $group과 $sort연산자가 함께 실행될시 리턴되는 첫번째 값또는 마지막 값
    $max/$min, 리턴되는 모든document의 최대최소
    $sum/$avg,
    $sort, collection에서 검색된 값을 분류 작업후 리턴

MapReduce 기능
    구글에서 대용량 데이터 처리 (Batch Processing) 및 집합(Aggregation)을 위해 만들어짐
    비 공유 규조로 연결된 여러 개의 노드에서 병렬 처리 방식으로 대용량 데이터를 처리
    MAP과 REDUCE 함수 만으로 병렬 처리 프로그램이 가능

[비저장형]
    function my_erase() {
        db.things.find()
        db.things.remove({})
    }
    my_erase();
    db.eval(my_erase);

[저장형]
    db.system.js.save({_id:"xy_function", value:function(x,y) {return x+y;}});
    db.eval("xy_function(1,2)");
    db.system.js.find();